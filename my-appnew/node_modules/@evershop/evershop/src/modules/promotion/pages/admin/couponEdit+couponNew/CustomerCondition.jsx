import PropTypes from 'prop-types';
import React from 'react';
import Select from 'react-select';
import Area from '@components/common/Area';
import { Field } from '@components/common/form/Field';
import Layout from "@evershop/evershop/src/modules/cms/pages/frontStore/all/Layout";
import {useTranslation} from "react-i18next";
import '../../../../i18n'



const customStyles = {
  container: (provided) => ({
    ...provided,
    zIndex: 1000
  })
};

export default function CustomerCondition({
                                            coupon = {},
                                            groups: { items: customerGroups }
                                          }) {
  const condition = coupon?.userCondition || {};
  const selectedGroups = (condition.groups || [])
      .filter((g) =>
          customerGroups.find(
              (group) => parseInt(group.value, 10) === parseInt(g, 10)
          )
      )
      .map((g) => {
        const group = customerGroups.find(
            (e) => parseInt(e.value, 10) === parseInt(g, 10)
        );
        return {
          value: group.value.toString(),
          label: group.name
        };
      });
  const {t, i18n} = useTranslation()
  return (
      <Area
          id="couponCustomerCondition"
          coreComponents={[
            {
              component: {
                // eslint-disable-next-line react/no-unstable-nested-components
                default: (
                    <Select
                        name="user_condition[groups][]"
                        options={customerGroups.map((group) => ({
                          value: group.value.toString(),
                          label: group.name
                        }))}
                        hideSelectedOptions
                        isMulti
                        defaultValue={selectedGroups}
                        styles={customStyles}
                    />
                )
              },
              props: {},
              sortOrder: 10,
              id: 'couponCustomerConditionGroup'
            },
            {
              component: { default: Field },
              props: {
                type: 'input',
                name: 'user_condition[emails]',
                label: t('customeremailempty'),
                placeholder: t('entercustomer'),
                value: condition.emails ? condition.emails : '',
                instruction: t('usecommaemail'),
                suffix: (
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        style={{ width: '1.8rem', height: '1.8rem' }}
                        viewBox="0 0 24 24"
                        strokeWidth={1.5}
                        stroke="currentColor"
                        className="w-6 h-6"
                    >
                      <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75"
                      />
                    </svg>
                )
              },
              sortOrder: 20,
              id: 'couponCustomerConditionEmail'
            },
            {
              component: { default: Field },
              props: {
                type: 'input',
                name: 'user_condition[purchased]',
                label: t('customerspurchase'),
                placeholder: t('enterpurschased'),
                value: condition.purchased || null,
                validationRules: ['number'],
                instruction: t('minumumtext')
              },
              sortOrder: 30,
              id: 'couponCustomerConditionPurchased'
            }
          ]}
      />
  );
}

CustomerCondition.propTypes = {
  coupon: PropTypes.shape({
    userCondition: PropTypes.shape({
      groups: PropTypes.arrayOf(PropTypes.number),
      emails: PropTypes.string,
      purchased: PropTypes.number
    })
  }),
  groups: PropTypes.shape({
    items: PropTypes.arrayOf(
        PropTypes.shape({
          value: PropTypes.number,
          name: PropTypes.string
        })
    )
  })
};

CustomerCondition.defaultProps = {
  coupon: {},
  groups: {
    items: []
  }
};

export const layout = {
  areaId: 'couponEditRight',
  sortOrder: 10
};

export const query = `
  query Query {
    coupon(id: getContextValue('couponId', null)) {
      userCondition {
        groups
        emails
        purchased
      }
    }
    groups: customerGroups {
      items {
        value: customerGroupId
        name: groupName
      }
    }
  }
`;
